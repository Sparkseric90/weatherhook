{"version":3,"sources":["components/weather.js","App.js","reportWebVitals.js","index.js"],"names":["refresh","window","location","reload","WeatherCard","weatherData","className","name","Button","inverted","color","circular","icon","onClick","moment","format","weather","main","temp","humidity","Date","sys","sunrise","toLocaleTimeString","sunset","App","useState","lat","setLat","long","setLong","data","setData","useEffect","a","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fetch","process","then","res","json","result","console","log","fetchData","class","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAKMA,EAAU,WACdC,OAAOC,SAASC,UA8BHC,EAzBK,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAF,OAClB,sBAAKC,UAAU,OAAf,UAEI,sBAAKA,UAAU,MAAf,UACE,mBAAGA,UAAU,SAAb,SAAuBD,EAAYE,OACnC,cAACC,EAAA,EAAD,CAAQF,UAAU,SAASG,UAAQ,EAACC,MAAM,QAAQC,UAAQ,EAACC,KAAK,UAAUC,QAASb,OAErF,sBAAKM,UAAU,OAAf,UACE,mBAAGA,UAAU,MAAb,SAAoBQ,MAASC,OAAO,6BACpC,mBAAGT,UAAU,cAAb,SAA4BD,EAAYW,QAAQ,GAAGC,UAErD,sBAAKX,UAAU,OAAf,UACE,oBAAGA,UAAU,OAAb,yBAAiCD,EAAYY,KAAKC,KAAlD,YACA,oBAAGZ,UAAU,OAAb,uBAA+BD,EAAYY,KAAKE,SAAhD,WAGF,sBAAKb,UAAU,OAAf,UACE,oBAAGA,UAAU,iBAAb,sBAAwC,IAAIc,KAA+B,IAA1Bf,EAAYgB,IAAIC,SAAgBC,mBAAmB,YACpG,oBAAGjB,UAAU,iBAAb,qBAAuC,IAAIc,KAA8B,IAAzBf,EAAYgB,IAAIG,QAAeD,mBAAmB,mBCzB3F,SAASE,IAEtB,MAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KAmBA,OAjBAC,qBAAU,YACO,uCAAG,sBAAAC,EAAA,6DAChBC,UAAUC,YAAYC,oBAAmB,SAAUC,GACjDV,EAAOU,EAASC,OAAOC,UACvBV,EAAQQ,EAASC,OAAOE,cAHV,SAMVC,MAAM,GAAD,OAAIC,0CAAJ,yBAAkDhB,EAAlD,gBAA6DE,EAA7D,+BAAwFc,qCAChGC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJf,EAAQe,GACRC,QAAQC,IAAIF,MAVA,2CAAH,qDAafG,KACC,CAACvB,EAAKE,IAGP,qBAAKvB,UAAU,MAAf,SAEwB,oBAAbyB,EAAKd,KACZ,cAAC,EAAD,CAASZ,YAAa0B,IAEtB,qBAAKoB,MAAM,mBAAX,SACE,qBAAKA,MAAM,qBAAX,uE,UCtBKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.270b8ce1.chunk.js","sourcesContent":["import React from 'react';\nimport './styles.css';\nimport moment from 'moment';\nimport { Button } from 'semantic-ui-react';\n\nconst refresh = () => {\n  window.location.reload();\n}\n\n\n\nconst WeatherCard = ({weatherData}) => (\n  <div className=\"main\">\n{/* All of the information that will be pulled in from the API and some styling from the Semantics-UI package */}\n      <div className=\"top\">\n        <p className=\"header\">{weatherData.name}</p>\n        <Button className=\"button\" inverted color='black' circular icon='refresh' onClick={refresh} />\n      </div>\n      <div className=\"flex\">\n        <p className=\"day\">{moment().format('MMMM Do YYYY, h:mm:ss a')}</p>\n        <p className=\"description\">{weatherData.weather[0].main}</p>\n      </div>\n      <div className=\"flex\">\n        <p className=\"temp\">Temprature: {weatherData.main.temp} &deg;C</p>\n        <p className=\"temp\">Humidity: {weatherData.main.humidity} %</p>\n      </div>\n\n      <div className=\"flex\">\n        <p className=\"sunrise-sunset\">Sunrise: {new Date(weatherData.sys.sunrise * 1000).toLocaleTimeString('en-IN')}</p>\n        <p className=\"sunrise-sunset\">Sunset: {new Date(weatherData.sys.sunset * 1000).toLocaleTimeString('en-IN')}</p>\n      </div>\n    \n  </div>\n  \n)\n\nexport default WeatherCard;","import './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport Weather from './components/weather';\nimport { Dimmer, Loader } from 'semantic-ui-react';\nexport default function App() {\n\n  const [lat, setLat] = useState([]);\n  const [long, setLong] = useState([]);\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        setLat(position.coords.latitude);\n        setLong(position.coords.longitude);\n      });\n\n      await fetch(`${process.env.REACT_APP_API_URL}/weather/?lat=${lat}&lon=${long}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`)\n        .then(res => res.json())\n        .then(result => {\n          setData(result)\n          console.log(result);\n        });\n    }\n    fetchData();\n  }, [lat, long])\n\n  return (\n    <div className=\"App\">\n    \n      {(typeof data.main != 'undefined') ? (\n        <Weather weatherData={data} />\n      ) : (\n        <div class=\"ui active dimmer\">\n          <div class=\"ui big text loader\">Your Weather Is Loading! Have you looked outside yet?</div>\n        </div>\n      )}\n    </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}